#!/usr/bin/env python
# -*- coding: utf-8 -*-
############################################################################
#
# MODULE:    i.desertf.regional
# AUTHOR(S): Desertwatch-E consortium
#
# PURPOSE:   Produces Desertification indicator at  REGIONAL scale
#
# COPYRIGHT: (C) 2010 by the GRASS Development Team
#
#   This program is free software under the GNU General Public
#   License (>=v2). Read I the file COPYING that comes with GRASS
#   for details.
#
#############################################################################
#%Module
#%  description: Produces Desertification susceptibility indicator map for regional scale based on Land Use/Cover map, climatic dataset and NDVI maps.
#%  keywords: raster, regional, desertification, globcover
#%End
#%option
#%  key: year
#%  type: integer
#%  description: Year for Indicator production:
#%  options: 1990-2050
#%  required: yes
#%end
#%option
#%  key: inputlulc
#%  type: string
#%  multiple: no
#%  gisprompt: old,cell,raster
#%  description: Name of Land Use/Cover raster map (from Regional scale/mapset):
#%  required: yes
#%end
#%option
#%  key: inputNDVI
#%  type: string
#%  multiple: no
#%  gisprompt: old,cell,raster
#%  description: Name of NDVI raster map (from Regional scale/mapset):
#%  required: yes
#%end
#%option
#%  key: output
#%  type: string
#%  description: Prefix for desertification index raster data (<prefix>_DESERTIFICATION):
#%  required: yes
#%end


import grass.script as grass 
import sys
import os

def main():
    #Predefined values
    start_year=1990
    max_size= 1200*1200 # maximum size for resampled LULC map
    resample_factor=10 #(3000/30=10)
    scalefactor=10000
    min_Cs=108
    max_Cs=319
    slope_Cd=abs(-88)
	
    #Get projection units
    proj_units=get_projection_units()

    # Define variables for Regional scale
    b_srx= "300"  #Spatial Resolution in X for Locations in meters
    b_sry= "300"
    t_mapset= "Regional"  #Mapset's Regional Scale name	
    t_srx= str(int(b_srx) * resample_factor)
	
    #Define variables for other mapsets
    c_mapset= "Historic_climate"	
	
    #Define values for GeoMS
    null_value="-9999.000"
    geomsoutput_dynamic='geomsoutput_dynamic.OUT'
    geomsoutput_static='geomsoutput_static.OUT'	
	
    # Retrieve variables from user interface
    year= options['year']
    inputlulc= options['inputlulc']
    inputNDVI= options['inputNDVI']
    output_pre= options['output']
	
    #Define temporary files and outputs
    pid=os.getpid()
    output= output_pre + "_DESERTIFICATION"
    climate_static_temp= "myscript.tmpCS" + str(pid)
    climate_dynamic_temp= "myscript.tmpCD" + str(pid)
    climate_static= output + "Cs" + str(pid)
    climate_dynamic= output + "Cd" + str(pid)
    dynamic_cokriging= output + "cokrigDynamic" + str(pid)
    static_cokriging= output + "cokrigStatic" + str(pid)
    basic_mov_variance= "myscript.tmpM" + str(pid)
    resamplelulc= "myscript.tmp" + 'resample' + str(pid)
    clumplulc= "myscript.tmp" + 'clump' + str(pid)
    vegetation_temp="myscript.tmpV1" + str(pid)
    vegetationresamp_temp="myscript.tmpVr"	+ str(pid)
    vegetation_component= output + "veg" + str(pid)
    B_temp= "myscript.tmpB" + str(pid)
    B_component= output + "B" + str(pid)
    C_temp= "myscript.tmpC" + str(pid)   	   	
    C_component= output + "C" + str(pid)
    tempmask="myscript.tmpMASK"	+ str(pid)
    climate_rasterlist= [climate_static, climate_dynamic, climate_dynamic_temp, climate_static_temp]
    scale_rasterlist= [output, dynamic_cokriging, static_cokriging, vegetation_component, B_component, C_component, tempmask,vegetation_temp]

# # # Check existance of required MAPSETS, input files and input data 
    #Check if Target mapset exists/available (Regional)
    list_mapsets=grass.mapsets(True)[0].split("newline")
    if list_mapsets.__contains__(t_mapset)==False:           
        grass.fatal("A Escala/Mapset Regional não existe ou não se encontra acessivel. Por favor crie um Mapset com o nome de  """ "Regional """ " usando o Painel introdutorio do DWE-IS ou editando as permissoes de acesso usando Ferramentas/Acesso ao Mapset.")
		
	#Check if Historic_climate exists/available
    if list_mapsets.__contains__(c_mapset)==False:           
        grass.fatal("A Escala/Mapset Historic_climate não existe ou não se encontra acessivel. Por favor crie um Mapset com o nome de  """ "Historic_climate """ " usando o Painel introdutorio do DWE-IS ou editando as permissoes de acesso usando Ferramentas/Acesso ao Mapset.")
		
	#Check if input LULC exists in right mapset
    if inputlulc.find('@')==-1:
        inputlulc=inputlulc + '@Regional'
    else:
        inputlulc_mapset_temp=inputlulc[inputlulc.find('@')+1:]
        if inputlulc_mapset_temp!='Regional':
            grass.fatal(("O mapa de Ocupação do Solo seleccionado não existe no Mapset/Escala Regional. Por favor verifique o mapa raster seleccionado."))	    	
    check_input= grass.find_file(inputlulc, element = 'cell', mapset=t_mapset)
    if check_input['fullname'] =="":           
        grass.fatal(("O mapa de Ocupação do Solo seleccionado não existe no Mapset/Escala Regional. Por favor verifique o mapa raster seleccionado."))	    	
	
	#Check if input NDVI map exists in right mapset
    if inputNDVI.find('@')==-1:
        inputNDVI=inputNDVI + '@Regional'
    else:	
        inputNDVI_mapset_temp=inputNDVI[inputNDVI.find('@')+1:]
        if inputNDVI_mapset_temp!=t_mapset:
            grass.fatal(("O mapa de NDVI seleccionado não existe no Mapset/Escala Regional. Por favor verifique o mapa raster seleccionado."))
    check_input= grass.find_file(inputNDVI, element = 'cell', mapset=t_mapset)
    if check_input['fullname'] =="":           
        grass.fatal(("O mapa de NDVI seleccionado não existe no Mapset/Escala Regional. Por favor verifique o mapa raster seleccionado."))
		      

	# Check if inserted year is a valid integer
    try:
        year_int= int(year)
    except ValueError:
        grass.fatal(("Valor inserido para ano não é válido. Altere o valor e tente de novo."))	

    # Check if inserted preffix is a valid string    
    p=string_check(output_pre)
    if p==-1:
        grass.fatal(("Foram detectados caracteres ilegais no prefixo inserido. Altere o prefixo e tente de novo."))

    # Retrieve current LOCATION, GISDBASE, GISBASE and MAPSET
    source_location= grass.gisenv()['LOCATION_NAME']    
    source_GISDBASE= grass.gisenv()['GISDBASE']    
    source_GISBASE = os.getenv('GISBASE')
    source_mapset= grass.gisenv()['MAPSET']	
    
    # Get GeoMS location and check if GeoMS exists	
    geomspath= source_GISBASE  + '/geoms/'
    check_folder= os.path.isdir(geomspath)
    if check_folder==False:
        grass.fatal(('A ferramenta GEOMS não foi encontrada no DWE-IS. Tente de novo e, caso o problema persista, reinstale o DWE-IS.'))	
    geomspath= geomspath + 'cokb3d.exe'
    check_file= os.path.isfile(geomspath)    
    if check_file==False:
        grass.fatal(('O binario GEOMS não foi encontrado no DWE-IS. Tente de novo e, caso o problema persista, reinstale o DWE-IS.'))			
		
	# Set temporary folder where to store files	
    tempath= source_GISBASE + '/temp/'	
    check_folder= os.path.isdir(tempath)
    if check_folder==False:
        grass.fatal(('A pasta temporaria (temp) do DWE-IS não foi encontrada no DWE-IS. Tente de novo e, caso o problema persista, reinstale o DWE-IS.'))		

    # Eliminate pre-existance files
    eliminate_files('all',tempath)    
    

	
    # # # # # Get Desertification parameter values
    grass.message(("A obter os parâmetros de desertificação a partir dos ficheiros de parametrização..."))
    # Define Desertification parameter file path
    if not source_GISBASE:		
        grass.fatal(('DWE-IS e GRASS não conseguem encontrar a localização do DWE-IS. Tente de novo e, caso o problema persista, reinstale o DWE-IS.'))
    else:	
        param_path= source_GISBASE + "/dweis/desertf_parameters/"		
    #Define Desertification parameter filename
    if source_location=="Portugal":
        file="Portugal"
    elif source_location=="Brazil":
        file="Brazil"   
    elif source_location=="Mozambique":	
        file="Mozambique"   	
    else:
        file="Others"		
    #Check if file exists in file system
    file_path= param_path + file
    check_file= os.path.isfile(file_path)		
    if check_file==False:
            grass.fatal(('DWE-IS não consegue encontrar o ficheiro de parametrização aplicável. Tente de novo e, caso o problema persista, reinstale o DWE-IS.'))				
    # Open, read lines to a list and close file
    fd = open(file_path)	
    lines = fd.read().split()
    fd.close()
    # Get Weight parameters for LULC- Vegetation	
    params_v=['']
    lulc_list=['Artificial_areas.v.','Rainfed_agriculture.v.','Irrigated_agriculture.v.','Forests.v.','Shrubland.v.','Natural_grassland.v.','Sparsely_vegetated_areas.v.','Burnt_areas.v.','Beaches_dunes_and_plains_and_rocks.v.','Wetlands.v.','Water_bodies.v.']
    for i in lulc_list:
        values= get_values(i,lines)  #HSD LSD
        check_lsdhsd(values[0],values[1],i,'vegetation')
        params_v.append(float(values[0]))
        params_v.append(float(values[1]))
    params_v.remove('')
    # Get Weight parameters for LULC- Soil
    params_s=['']
    lulc_list=['Artificial_areas.s.','Rainfed_agriculture.s.','Irrigated_agriculture.s.','Forests.s.','Shrubland.s.','Natural_grassland.s.','Sparsely_vegetated_areas.s.','Burnt_areas.s.','Beaches_dunes_and_plains_and_rocks.s.','Wetlands.s.','Water_bodies.s.']
    for i in lulc_list:
        values= get_values(i,lines)  #HSD LSD
        check_lsdhsd(values[0],values[1],i,'soil')
        params_s.append(float(values[0]))
        params_s.append(float(values[1]))
    params_s.remove('')    	
    # Get climatic maps weights	
    params_w=['']    
    weight_list=['weight.dynamic.indicator', 'weight.static.indicator']
    weight_values=get_params(weight_list,lines,'weights')
    check_weights(weight_values[0], 'weight.dynamic.indicator', weight_values[1],'weight.static.indicator')
    params_w.append(float(weight_values[0]))
    params_w.append(float(weight_values[1]))
    params_w.remove('')	
    # Get correlation coefficient values
    params_c=['']
    coef_list=['Correlationcoef.discriminant', 'Correlationcoef.Ndiscriminant']
    coef_values= get_params(coef_list,lines,'correlationcoeff')    
    check_correlationcoeffs(coef_values[0], 'Correlationcoef.discriminant', coef_values[1],'Correlationcoef.Ndiscriminant')	
    params_c.append(float(coef_values[0]))
    params_c.append(float(coef_values[1]))
    params_c.remove('')	
	
	#Verify if the number of valid items is expected
    if len(params_v)!=22 and len(params_s)!=22 and len(params_w)!=2 and len(params_c)!=2:
        grass.fatal(("Não foi possível ler correctamente todos os parâmetros do módulo de calculo de susceptibilidade à desertificação. Por favor verifique o ficheiro de parameterização."))	

		

# # # # # PRODUCE CLIMATE MAPS (Static & Dynamic)
    # Move to Historic_climate	
    if source_mapset != c_mapset:
    	#Define target MAPSET as HISTORIC_CLIMATE
    	p=grass.run_command("g.mapset", mapset = c_mapset, quiet=True)  	
        if p!=0:
           grass.fatal(("Não foi possível ao GRASS mudar para o Mapset  Historic_climate. Verifique a sua existência ou direito de acesso."))		

    # Eliminate pre-existance mapsstatic maps (climate__static),dynamic maps (climate__dynamic),pre-existance moving variance ("myscript.tmp")	
    eliminate_rastermaps([climate_rasterlist])  
    eliminate_rasterlists('myscript.tmp*', c_mapset)	
    eliminate_rasterlists( output + '*', c_mapset)		
	
    # Create a list of required CLimate data
    if year_int<2010:
        climate_dataset= range(start_year,2010+1)           	
    else:
        climate_dataset= range(start_year,year_int)           

    # Check if all Historic_climate dataset is complete
    for x in climate_dataset:
        check_climate= check_dataset(str(x),c_mapset)
        if check_climate==-1:
            grass.fatal(("O dataset climático está incompleto. Estão em falta dados climáticos do ano  %s. Por favor use o módulo Arquivo/Actualizar dados históricos climaticos para completar o dataset.") % str(x))
    
    # If exists, add current year to the Climate dataset
    check_climate= check_dataset(year,c_mapset)
    if (check_climate==1) and (year_int not in climate_dataset):    
       climate_dataset.append(year_int)


    #Define Historic_climate computational region
    try:
       grass.run_command("g.region", rast = climate_dataset, quiet=True)
    except:
       grass.fatal(("Não foi possível ao GRASS definir uma região computacional para o dataset climatico. Por favor verifique os ficheiros do Mapset/Escala Historic_climate."))

    # Calculate climate static map
    grass.message(("Calculando a componente climática estática Cs(x)..."))	
    p=grass.run_command("r.series", input=climate_dataset, output=climate_static_temp, method="average", quiet=True, overwrite=True)        	
    if p!=0:
        grass.fatal(("Não foi possível ao DWE-IS produzir a componente climática estática. Por favor verifique os ficheiros do Mapset/Escala Historic_climate."))

    # Calculte Cs(x)
    try:
        grass.mapcalc("$out=1-(($max_a-$static)/($max_a-$min_a))",out=climate_static, min_a=min_Cs, max_a=max_Cs, static=climate_static_temp)
    except:
        eliminate_rasterlists('*__*', c_mapset)
        eliminate_rasterlists('myscript.tmp*', c_mapset)
        grass.fatal(("Não foi possível ao DWE-IS produzir a componente climática estática. Por favor verifique os ficheiros do Mapset/Escala Historic_climate."))
		    
    # Calculate moving variance maps- GRASS uses n as denominator instead of (n-1)
    grass.message(("Calculando a componente climática dinâmica Cd(x)..."))	
    list_movingvariance=[""]
    moving_counter=0
    for x in climate_dataset:
        moving_counter=moving_counter+1
        begin_idx=climate_dataset.index(x)       
        end_idx=begin_idx+10
        if end_idx>=len(climate_dataset)+1:
            break
        tmoving= basic_mov_variance + "." + str(moving_counter)
        list_movingvariance.append(tmoving)
        p=grass.run_command("r.series", input=climate_dataset[begin_idx:end_idx], output=tmoving, method="variance", quiet=True, overwrite=True)        	
        if p!=0:
            grass.fatal(("Não foi possível ao DWE-IS calcular a variância móvel. Por favor verifique os ficheiros do Mapset/Escala Historic_climate."))
    del list_movingvariance[0]			

    #Correct moving average values
    p= correct_movingvariances(list_movingvariance)
    if p!=0:
        eliminate_rasterlists('*__*', c_mapset)
        eliminate_rasterlists('myscript.tmp*', c_mapset)
        grass.fatal(("Não foi possível ao DWE-IS produzir a componente climática estática. Por favor verifique os ficheiros do Mapset/Escala Historic_climate."))		

	# Calculate dynamic maps (SLOPE)
    p=grass.run_command("r.series", input=list_movingvariance, output=climate_dynamic_temp, method="slope", quiet=True, overwrite=True)        	
    if p!=0:
        eliminate_rasterlists('*__*', c_mapset)
        eliminate_rasterlists('myscript.tmp*', c_mapset)
        grass.fatal(("Não foi possível ao DWE-IS produzir a componente climática estática. Por favor verifique os ficheiros do Mapset/Escala Historic_climate."))
    
    # Calculte Cd(x)    	
    try:
        grass.mapcalc("$out=if($RL1>$min_slope,0,($min_slope-$RL1)/(2*$min_slope))",out=climate_dynamic, min_slope=slope_Cd, RL1=climate_dynamic_temp) 		
    except:
        eliminate_rasterlists('*__*', c_mapset)
        eliminate_rasterlists('myscript.tmp*', c_mapset)
        eliminate_rastermaps([climate_dynamic])
        grass.fatal(("Não foi possível ao DWE-IS produzir a componente climática dinâmica. Por favor verifique os ficheiros do Mapset/Escala Historic_climate."))  		

    # EXPORT Dynamic map
    path_climate_dynamic= tempath + "climate_dynamic.prn"
    p=grass.run_command("r.out.xyz", input=climate_dynamic, output=path_climate_dynamic, fs=" ", overwrite=True)
    if p!=0:
        eliminate_rasterlists('*__*', c_mapset)
        eliminate_rasterlists('myscript.tmp*', c_mapset)
        eliminate_rastermaps([climate_dynamic,climate_static])
        eliminate_files(path_climate_dynamic,tempath)    		
        grass.fatal(("Não foi possível criar um ficheiro ASCII para a componente climática dinâmica na pasta temporária. Tente de novo e, caso o problema persista, reinstale o DWE-IS."))  		
    #Check if Exported XYZ dynamic map obbey to QA defined structure
    p=grass.run_command("qa.out.xyz", input_raster=climate_dynamic, file_path=path_climate_dynamic)
    if p!=0:
        eliminate_rasterlists('*__*', c_mapset)
        eliminate_rasterlists('myscript.tmp*', c_mapset)
        eliminate_rastermaps([climate_dynamic,climate_static])
        eliminate_files(path_climate_dynamic,tempath)    		
        grass.fatal(("Não foi possível criar um ficheiro ASCII para a componente climática dinâmica na pasta temporária. Tente de novo e, caso o problema persista, reinstale o DWE-IS."))  		
				
	# EXPORT Climate static map
    path_climate_static= tempath + "climate_static.prn"
    p=grass.run_command("r.out.xyz", input=climate_static, output=path_climate_static, fs=" ", overwrite=True)
    if p!=0:
        eliminate_rasterlists('*__*', c_mapset)
        eliminate_rasterlists('myscript.tmp*', c_mapset)
        eliminate_rastermaps([climate_dynamic,climate_static])
        eliminate_files('all',tempath)    				
        grass.fatal(("Não foi possível criar um ficheiro ASCII para a componente climática estática na pasta temporária. Tente de novo e, caso o problema persista, reinstale o DWE-IS."))  		
    p=grass.run_command("qa.out.xyz", input_raster=climate_static, file_path=path_climate_static)
    if p!=0:
        eliminate_rasterlists('*__*', c_mapset)
        eliminate_rasterlists('myscript.tmp*', c_mapset)
        eliminate_rastermaps([climate_dynamic,climate_static])
        eliminate_files('all',tempath)    				
        grass.fatal(("Não foi possível criar um ficheiro ASCII para a componente climática estática na pasta temporária (temp). Tente de novo e, caso o problema persista, reinstale o DWE-IS."))  		
		    
	# Delete temporary maps
    eliminate_rasterlists('*__*', c_mapset)
    eliminate_rasterlists('myscript.tmp*', c_mapset)
    eliminate_rastermaps([climate_dynamic_temp, climate_static_temp,climate_static,climate_dynamic])

  	
	
	# Go to Regional mapset to Resample LULC and scale NDVI and TcB
    p=grass.run_command("g.mapset", mapset = t_mapset, quiet=True)  	
    if p!=0:
        grass.fatal(("Não foi possível ao GRASS mudar para o Mapset Regional. Verifique a sua existência ou direito de acesso."))		
        eliminate_files('all',tempath)		  
    # Delete temporary vegetation
    eliminate_rasterlists('myscript.tmpresample*', t_mapset)					
    eliminate_rasterlists('myscript.tmpclump*', t_mapset)							
    eliminate_rasterlists('myscript.tmp*', t_mapset)		
    eliminate_rastermaps([scale_rasterlist])
	
	# Define computational region in Regional scale to resample LULC
    try:
       if proj_units=="meters":	   
           p=grass.run_command("g.region", rast = inputlulc, res= t_srx, quiet=True, zoom=inputlulc)  
       else:
           region = grass.region()
           b_srx= region['nsres']
           b_sry= region['ewres']
           t_srx= str(float(b_srx) * resample_factor)
           t_sry= str(float(b_sry) * resample_factor)		   
           grass.run_command("g.region", rast = inputlulc, zoom=inputlulc, nsres=t_sry, ewsres=t_srx, quiet=True)  		   
    except:
       if proj_units=="meters":	   
           grass.run_command("g.region", rast = inputlulc,  res= b_srx, quiet=True)  
       else:
           grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	
       eliminate_files('all',tempath)		   
       grass.fatal(("Não foi possível ao GRASS definir uma região computacional para o Mapset/Escala Regional. Por favor verifique caracteristicas do Mapset/Escala Regional (e.g. resolução espacial e extensão)."))			   


	   
# # # RESAMPLE LULC
    grass.message(("A reamostrar o mapa de Ocupação do Solo para uma resolução espacial mais grosseira..."))	
    p= grass.run_command("r.resamp.stats", input=inputlulc, output=resamplelulc, method='mode' ,quiet=True, overwrite=True)
    if p!=0:
      if proj_units=="meters":	   
        grass.run_command("g.region", rast = inputlulc, res= b_srx, zoom=inputlulc, quiet=True)  
      else:
        grass.run_command("g.region", rast = inputlulc, zoom=inputlulc, quiet=True)
      eliminate_files('all',tempath)
      eliminate_rastermaps([resamplelulc])	   		      
      eliminate_rasterlists('myscript.tmp*', t_mapset)	
      grass.fatal(("Não foi possível ao GRASS definir uma região computacional para o Mapset/Escala Regional. Por favor verifique caracteristicas do Mapset/Escala Regional (e.g. resolução espacial e extensão)"))      

    # Check if resampled LULC size is smaller than 1200x1200
    if grass.region()['cells']>max_size:
      if proj_units=="meters":	   
        grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
      else:
        grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	
      eliminate_files('all',tempath)	
      eliminate_rastermaps([resamplelulc])	   		    	        
      eliminate_rasterlists('myscript.tmp*', t_mapset)	
      grass.fatal(("O mapa de Ocupação do Solo não pode ser utilizado pelo GeoMS. Por favor use um mapa de Ocupação do Solo mais pequeno."))
	  

# # # RESAMPLE and CLUMP NDVI
    grass.message(("Reamostrando e calcundo os valores médios de NDVI para cada polígono de Ocupacado do Solo..."))
    p= grass.run_command("r.resamp.stats", input=inputNDVI, output=vegetation_temp, method='average' ,quiet=True, overwrite=True)
    if p!=0:
        if proj_units=="meters":	   
           grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
        else:
           grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	
        eliminate_files('all',tempath)
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_temp])	   		    	                      	
        eliminate_rasterlists('myscript.tmp*', t_mapset)	
        grass.fatal(("Não foi possível fazer reamostragem do mapa raster de NDVI. Por favor verifique o mapa de NDVI seleccionado."))			          	

		
# # # Produce null mask for NDVI(x) and LULC
    try:
        grass.mapcalc("$output= if($LULC>=1 || $V>=0,1,null())", output=tempmask, LULC=resamplelulc, V=vegetation_temp)   		
    except:
        if proj_units=="meters":	   
            grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
        else:
            grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	        
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_component])	           		                               	            	           
        eliminate_rasterlists('*__*', t_mapset)
        eliminate_files('all',tempath)		
        eliminate_rasterlists('myscript.tmp*', t_mapset)	
        grass.fatal(("Não foi possível criar uma máscara para os mapas de entrada. Por favor verifique os mapas raster de entrada seleccionados."))  
    # Apply mask to V(x) and LULC maps
    p=apply_mask(tempmask,resamplelulc,vegetation_temp)
    if p!=0:
        if proj_units=="meters":	   
            grass.run_command("g.region", rast = inputlulc, res= b_srx, flags="a", quiet=True)  
        else:
            grass.run_command("g.region", rast = inputlulc, flags="a", quiet=True)  		   	        
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_component])	           		                               	            	           
        eliminate_rasterlists('*__*', t_mapset)
        eliminate_files('all',tempath)
        eliminate_rasterlists('myscript.tmp*', t_mapset)	
        grass.fatal(("Não foi possível criar uma máscara para os mapas de entrada. Por favor verifique os mapas raster de entrada seleccionados."))
    #Check if there is any valid pixel in LULC
    p=existing_validvalues(resamplelulc)
    if p==0:
        if proj_units=="meters":	   
            grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
        else:
            grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	        
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_component])	           		                               	            	           
        eliminate_rasterlists('*__*', t_mapset)
        eliminate_files('all',tempath)
        eliminate_rasterlists('myscript.tmp*', t_mapset)	
        grass.fatal(("O processo de criação de máscara não identificou pixeis de Ocupação do Solo sobrepostos no mapa raster NDVI. Por favor verifique os mapas raster de entrada seleccionados."))			          	               		                		
	# Define region in Regional scale to resample LULC
    try:
       if proj_units=="meters":	   
           p=grass.run_command("g.region", rast = resamplelulc, res= t_srx, quiet=True, zoom=inputlulc)  
       else:
           region = grass.region()
           b_srx= region['nsres']
           b_sry= region['ewres']
           t_srx= str(float(b_srx) * resample_factor)
           t_sry= str(float(b_sry) * resample_factor)		   
           grass.run_command("g.region", rast = inputlulc, zoom=inputlulc, nsres=t_sry, ewsres=t_srx, quiet=True)  		   
    except:
       if proj_units=="meters":	   
           grass.run_command("g.region", rast = inputlulc,  res= b_srx, quiet=True)  
       else:
           grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	
       eliminate_files('all',tempath)		   
       grass.fatal(("Não foi possível ao GRASS definir uma região computacional para o mapa de Ocupação do Solo. Por favor verifique os ficheiros de entrada seleccionados."))			       

    # Create polygons/clump LULC map
    p=grass.run_command("r.clump", input= resamplelulc, output= clumplulc, quiet=True, overwrite=True)
    if p!=0:
      if proj_units=="meters":	   
        grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
      else:
        grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	
      eliminate_files('all',tempath)
      eliminate_rastermaps([resamplelulc,clumplulc])	   		    	           
      eliminate_rasterlists('myscript.tmp*', t_mapset)	
      grass.fatal(("Não foi possível definir polígonos de Ocupação do Solo. Por favor verifique o mapa raster de entrada de Ocupação do Solo."))			                  


	   
# # # PRODUCE VEGETATION COMPONENT	
    grass.message(("Calculando o mapa com a vegetação V(x)..."))	 	
    # Calculate NDVI map for clump map (mean)
    p=grass.run_command("r.scale",input=vegetation_temp,output=vegetationresamp_temp, scalefactor=scalefactor, quiet=True, overwrite=True)	
    if p!=0:
        if proj_units=="meters":	   
           grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
        else:
           grass.run_command("g.region", rast = inputlulc, quiet=True)
        eliminate_files('all',tempath)
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_temp])	                   	        
        eliminate_rasterlists('myscript.tmp*', t_mapset)	
        grass.fatal(("Não é possível criar uma mapa com a reamostragem de NDVI. Por favor verifique o mapa raster de entrada para NDVI."))			          		
    eliminate_rastermaps([vegetation_temp])

    p=grass.run_command("r.statistics", base= clumplulc, cover= vegetationresamp_temp, output= vegetation_temp, method='average', quiet=True, overwrite=True)    
    if p!=0:
        if proj_units=="meters":	   
           grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
        else:
           grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	        
        eliminate_files('all',tempath)		   
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_temp,vegetationresamp_temp])	           			        
        eliminate_rasterlists('myscript.tmp*', t_mapset)	
        grass.fatal(("DWE-IS não consegue calcular o valor médio de NDVI para cada parcela de Ocupação do Solo. Por favor verifique os mapas raster de entrada para NDVI e Ocupação do Solo."))
    eliminate_rastermaps([vegetationresamp_temp])
	
    # Calculate V(x)     
    classes_positions= [0,2,4,6,8,10,12,14,16,18,20]
    class_idx=0
    vegetation_series=[""]
    for x in classes_positions:
        class_idx=class_idx+1
        vegetation_series.append([vegetation_temp + str(class_idx)])		   
        p=grass.run_command("r.SV.component", lsd=params_v[x+1], hsd=params_v[x], classid=class_idx, component="vegetation", input=vegetation_temp, output= [vegetation_temp + str(class_idx)], lulc=resamplelulc, scalefactor=scalefactor, overwrite=True, tmapset=t_mapset)
        if p==-1:
           if proj_units=="meters":	   
               grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
           else:
               grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	      
           eliminate_files('all',tempath)			   
           eliminate_rastermaps([resamplelulc,clumplulc])	           			                      
           eliminate_rasterlists('myscript.tmp*', t_mapset)	
           grass.fatal(("DWE-IS não consegue calcular o valor médio de NDVI para cada parcela de Ocupação do Solo. Por favor verifique os mapas raster de entrada para NDVI e Ocupação do Solo."))			          	           			     
    vegetation_series.remove('')	

    # Merge vegetation sub-component maps		        
    p=grass.run_command("r.series", input=vegetation_series, output=vegetation_component, method="sum", quiet=True, overwrite=True)
    if p==-1:
        if proj_units=="meters":	   
            grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
        else:
            grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	        
        eliminate_files('all',tempath)			
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_component])	           		                   
        eliminate_rasterlists('*__*', t_mapset)
        eliminate_rasterlists('myscript.tmp*', t_mapset)	
        grass.fatal(("Não foi possível calcular a componente de vegetação. Por favor verifique os ficheiros de entrada de NDVI e de Ocupação do Solo."))



		
		
# # # PRODUCE INTERMEDIATE COMPONENT B(x)
    grass.message(("Calculando o mapa com a componente biofísica B(x)..."))
    try:
        grass.mapcalc("$out=$V",out=B_component, V=vegetation_component)
    except:	
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_component,B_component])	           		                               	            	           		   		      
        eliminate_files('all',tempath)		   
        eliminate_rasterlists('*__*', t_mapset)
        eliminate_rasterlists('myscript.tmp*', t_mapset)	
        grass.fatal(("Não é possível calcular a componente biofísica para cada classe de Ocupação do Solo. Tente de novo e, caso o problema persista, reinstale o DWE-IS."))			          	       

    # Export B(x)
    path_B= tempath + "biophysical.out"	
    p=grass.run_command("r.out.secondary", input=B_component, null_value=null_value, output=path_B)
    if p!=0:
        if proj_units=="meters":	   
            grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
        else:
            grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	
        eliminate_files('all',tempath)
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_component,B_component])	           		                               	            	           		   		      
        eliminate_rasterlists('*__*', t_mapset)
        eliminate_rasterlists('myscript.tmp*', t_mapset)	
        grass.fatal(("Não é  possível exportar a componente B(x). Por favor verifique a existência das pastas temp e  geoms na pasta de instalação do DWE-IS."))			          	       
		
    #Check QA for produced B(x) file for GEOMS
    p=grass.run_command("qa.out.secondary", input_raster=B_component, null_value=null_value, file_path=path_B)	
    if p!=0:
        if proj_units=="meters":	   
            grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
        else:
            grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	
        eliminate_files('all',tempath)
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_component,B_component])	           		                               	            	           		   		      
        eliminate_rasterlists('*__*', t_mapset)
        eliminate_rasterlists('myscript.tmp*', t_mapset)	
        grass.fatal(("O ficheiro da componente B(x) criado para o GeoMS não está de acordo com os requisitos da ferramenta. Por favor verifique a existência das pastas temp e  geoms na pasta de instalação do DWE-IS."))			          	           


		
# # # PRODUCE Climatic correlation coefficient map
    grass.message(("Calculando o coeficiente de correlação C(x)..."))
    classes_positions= [0,2,4,6,8,10,12,14,16,18,20]
    class_idx=0    
    C_series=[""]	
    for x in classes_positions:
        class_idx=class_idx+1
        C_series.append([C_temp + str(class_idx)])				
        p=grass.run_command("r.correlation.coefficient_REG",  V_lsd=params_v[x+1], V_hsd=params_v[x], discriminant_param=params_c[0], Ndiscriminant_param=params_c[1], classid=class_idx, output= [C_temp + str(class_idx)], lulc=resamplelulc, overwrite=True)
        if p!=0:
           if proj_units=="meters":	   
               grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
           else:
               grass.run_command("g.region", rast = inputlulc,quiet=True)  		   	
           eliminate_files('all',tempath)			   
           eliminate_rastermaps([resamplelulc,clumplulc,vegetation_component,B_component])
           eliminate_rasterlists('*__*', t_mapset)
           eliminate_rasterlists('myscript.tmp*', t_mapset)	
           grass.fatal(("Não é possível calcular o coeficiente de correlação para cada classe de Ocupação do Solo. Tente de novo e, caso o problema persista, reinstale o DWE-IS."))			          	       
    C_series.remove('')		
					
	# Merge Correlation coefficient  maps		
    p=grass.run_command("r.series", input=C_series, output=C_component, method="sum", quiet=True, overwrite=True)
    if p!=0:
        if proj_units=="meters":	   
            grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
        else:
            grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	        
        eliminate_files('all',tempath)			
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_component,B_component,C_component])	
        eliminate_rasterlists('*__*', t_mapset)
        eliminate_rasterlists('myscript.tmp*', t_mapset)	
        grass.fatal(("Não é possível calcular o coeficiente de correlação. Tente de novo e, caso o problema persista, reinstale o DWE-IS."))			          	           
					 				       	
	# Export correlations map
    path_C= tempath + "correlationcoef.out"	
    p=grass.run_command("r.out.secondary", input=C_component, null_value=null_value, output=path_C)
    if p!=0:
        if proj_units=="meters":	   
            grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
        else:
            grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	        
        eliminate_files('all',tempath)			
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_component,B_component,C_component])				
        eliminate_rasterlists('*__*', t_mapset)
        eliminate_rasterlists('myscript.tmp*', t_mapset)	
        grass.fatal(("Não é possível exportar a componente C(x). Por favor verifique a existência das pastas temp e  geoms na pasta de instalação do DWE-IS."))			          	       
		
    #Check QA for produced C(x) file for GEOMS
    p=grass.run_command("qa.out.secondary", input_raster=C_component, null_value=null_value, file_path=path_C)	
    if p!=0:
        if proj_units=="meters":	   
            grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
        else:
            grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	
        eliminate_files('all',tempath)
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_component,B_component, C_component])
        eliminate_rasterlists('*__*', t_mapset)
        eliminate_rasterlists('myscript.tmp*', t_mapset)	
        grass.fatal(("O ficheiro da componente C(x) criado para o GeoMS não está de acordo com os requisitos da ferramenta. Por favor verifique a existência das pastas temp e  geoms na pasta de instalação do DWE-IS."))			          	           


		
# # #  Run GEOMS
    # Create GEOMS parameters file for Climate Static
    grass.message(("A criar ficheiros de parameterização do GeoMS e a correr o GeoMS..."))
    p=grass.run_command("t.out.geomspar", quiet=True, parameter_path=tempath, climate_data="static", climate_path=path_climate_static, biophysical_path=path_B, correlationcoeff_path=path_C, output_path=tempath, null_value=null_value, output=geomsoutput_static)
    if p!=0:	
        if proj_units=="meters":	   
            grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
        else:
            grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	
        eliminate_files('all',tempath)			
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_component,B_component,C_component])				
        eliminate_rasterlists('*__*', t_mapset)
        eliminate_rasterlists('myscript.tmp*', t_mapset)	
        grass.fatal(("DWE-IS não consegue criar um ficheiro de parameterização para o GeoMS com a componente climática estática. Por favor verifique a existência das pastas temp e  geoms na pasta de instalação do DWE-IS."))			          	       
    
    #Do QA analysis over generated Parameter file
    p=grass.run_command("qa.out.geomspar", quiet=True, parameter_path=tempath, output_path=tempath, null_value=null_value, output=geomsoutput_static)
    if p!=0:
        if proj_units=="meters":	   
            grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
        else:
            grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	
        eliminate_files('all',tempath)			
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_component,B_component,C_component])				
        eliminate_rasterlists('*__*', t_mapset)
        eliminate_rasterlists('myscript.tmp*', t_mapset)	
        grass.fatal(("O ficheiro de parameterização criado para o GeoMS não está de acordo com os requisitos da ferramenta. Tente de novo e, caso o problema persista, reinstale o DWE-IS."))			          	       

    # Run GeoMS for Climate Static		
    f=open(tempath + 'debug2_static.DBG', 'w') 
    cmd=  geomspath
    externalProcess = grass.Popen(cmd, stdout=grass.PIPE, stderr=grass.PIPE, cwd=tempath)	
    if p==['']:
        if proj_units=="meters":	   
            grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
        else:
            grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	
        eliminate_files('all',tempath)
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_component,B_component,C_component])				
        eliminate_rasterlists('*__*', t_mapset)
        eliminate_rasterlists('myscript.tmp*', t_mapset)	
        grass.fatal(("Não foi possível correr a ferramenta GeoMS a partir do GRASS+DWE-IS. Tente de novo e, caso o problema persista, reinstale o DWE-IS."))
    stdout, stderr = externalProcess.communicate()		
    f.write(stdout + '\n')
    f.write('----------------- \n')	
    f.write('----------------- \n')		
    f.write(stderr + '\n')	
    f.close()
					 				       	
    # Create GEOMS parameters file for Climate Dynamic
    p=grass.run_command("t.out.geomspar", quiet=True, parameter_path=tempath, climate_data="dynamic", climate_path=path_climate_dynamic, biophysical_path=path_B, correlationcoeff_path=path_C, output_path=tempath, null_value=null_value, output=geomsoutput_dynamic)
    if p!=0:		
        if proj_units=="meters":	   
            grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
        else:
            grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	        
        eliminate_files('all',tempath)        
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_component,B_component,C_component])					
        eliminate_rasterlists('*__*', t_mapset)
        eliminate_rasterlists('myscript.tmp*', t_mapset)	
        grass.fatal(("DWE-IS não consegue criar um ficheiro de parameterização para o GeoMS com a componente climática dinâmica. Por favor verifique a existência das pastas temp e  geoms na pasta de instalação do DWE-IS."))			          	       
		
    #Do QA analysis over generated Parameter file		
    p=grass.run_command("qa.out.geomspar", quiet=True, parameter_path=tempath, output_path=tempath, null_value=null_value, output=geomsoutput_dynamic)
    if p!=0:
        if proj_units=="meters":	   
            grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
        else:
            grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	
        eliminate_files('all',tempath)        
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_component,B_component,C_component])				
        eliminate_rasterlists('*__*', t_mapset)
        eliminate_rasterlists('myscript.tmp*', t_mapset)	
        grass.fatal(("O ficheiro de parameterização criado para o GeoMS nao está de acordo com os requisitos da ferramenta. Tente de novo e, caso o problema persista, reinstale o DWE-IS."))			          	       

    # Run GeoMS for Climate Dynamic
    f=open(tempath + 'debug2_dynamic.DBG', 'w') 
    cmd=  geomspath
    externalProcess = grass.Popen(cmd, stdout=grass.PIPE, stderr=grass.PIPE, cwd=tempath)	
    if p==['']:
        if proj_units=="meters":	   
            grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
        else:
            grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	
        eliminate_files('all',tempath)
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_component,B_component,C_component])				
        eliminate_rasterlists('*__*', t_mapset)
        eliminate_rasterlists('myscript.tmp*', t_mapset)	
        grass.fatal(("Não foi possível correr a ferramenta GeoMS a partir do GRASS+DWE-IS. Tente de novo e, caso o problema persista, reinstale o DWE-IS."))
    stdout, stderr = externalProcess.communicate()				
    f.write(stdout + '\n')
    f.write('----------------- \n')	
    f.write('----------------- \n')		
    f.write(stderr + '\n')	
    f.close()	


	
# # # IMPORT DYNAMIC AND STATIC CLIMATE GEOMS's OUTPUT  
    p=grass.run_command("r.in.geoms",  input_file= geomsoutput_dynamic, output=dynamic_cokriging, tempath=tempath, null_value=null_value)
    if p!=0:		
        if proj_units=="meters":	   
            grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
        else:
            grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	        
        eliminate_files('all',tempath)			
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_component,B_component,C_component])						
        eliminate_rasterlists('*__*', t_mapset)
        eliminate_rasterlists('myscript.tmp*', t_mapset)	
        grass.fatal(("Não foi possível importar o ficheiro de saída do GeoMS. Por favor verifique a existência das pastas temp e  geoms na pasta de instalação do DWE-IS."))			          	                   

    p=grass.run_command("r.in.geoms", quiet=True, input_file= geomsoutput_static, output=static_cokriging, tempath=tempath, null_value=null_value)
    if p!=0:		
        if proj_units=="meters":	   
            grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
        else:
            grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	
        eliminate_files('all',tempath)			
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_component,B_component,C_component,dynamic_cokriging,static_cokriging])					
        eliminate_rasterlists('*__*', t_mapset)
        eliminate_rasterlists('myscript.tmp*', t_mapset)		
        grass.fatal(("Não foi possível importar o ficheiro de saída do GeoMS. Por favor verifique a existência das pastas temp e  geoms na pasta de instalação do DWE-IS."))			          	               		
    
	# Eliminate null values
    p=eliminate_nullvalues(static_cokriging,dynamic_cokriging)
    if p!=0:
        if proj_units=="meters":	   
            grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
        else:
            grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	
        eliminate_files('all',tempath)			
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_component,B_component,C_component,dynamic_cokriging,static_cokriging])					
        eliminate_rasterlists('*__*', t_mapset)
        eliminate_rasterlists('myscript.tmp*', t_mapset)		
        grass.fatal(("Não foi possível eliminar valores inválidos obtidos pelo GeoMS. Por favor verifique a existência das pastas temp e  geoms na pasta de instalação do DWE-IS."))			          	               		         

		
		
	# # # INTEGRATION OF COKRIGING OUTPUTS FOR STATIC AND DYNAMIC COMPONENTS
    grass.message(("Integração final dos resultados obtidos pela ferramenta GeoMS..."))
    try:
        grass.mapcalc("$output= ($dynamic * $weight_dynamic) + ($static * $weight_static)", output=output, dynamic=dynamic_cokriging, static=static_cokriging, weight_dynamic=params_w[0] , weight_static= params_w[1])   		
    except:
        if proj_units=="meters":	   
            grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
        else:
            grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	        
        eliminate_files('all',tempath)        
        eliminate_rastermaps([resamplelulc,clumplulc,vegetation_component,B_component,C_component,dynamic_cokriging,static_cokriging])																			
        eliminate_rasterlists('*__*', t_mapset)
        eliminate_rasterlists('myscript.tmp*', t_mapset)	
        grass.fatal(("O DWE-IS não consegue produzir o resultado final para o indicador de susceptibilidade à desertificação. Por favor verifique os ficheiros de entrada seleccionados e avalie a sua aplicabilidade à produção deste indicador."))
				 				       			    
	# Eliminate files from temporary folder and parameter file from msys folder and temporary files	
    eliminate_rastermaps([tempmask,vegetation_temp,resamplelulc, clumplulc,vegetation_component,B_component,C_component,dynamic_cokriging,static_cokriging])	    
    eliminate_rasterlists('myscript.tmp*', t_mapset)	    
    eliminate_files('all',tempath)
             
	# Apply color table (DWE-IS defined color table)
    if not source_GISBASE:
        grass.warning(('A localização do DWEIS+GRASS não está definida. Tente de novo e, caso o problema persista, reinstale o DWE-IS."'))
        grass.run_command('r.colors', map = output, rules = "grey", quiet=True)	
    else:
        color_path= source_GISBASE + "/dweis/color/desertcolor" 
        check_file= os.path.isfile(color_path)    			
        if check_file==True:
            p=grass.run_command('r.colors', map = output, rules = color_path, quiet=True)	
            if p!=0:			
                grass.warning(('Não foi possivel ao DWE-IS aplicar a tabela de cores ao mapa de desertificação. Pode aplicar esta tabela manualmente ou tente novamente gerar este mapa.'))                              									
                grass.run_command('r.colors', map = output, rules = "grey", quiet=True)					
        else:
            grass.warning(("DWE-IS e GRASS não conseguem encontrar a tabela de cores para os mapas de desertificação. Tente de novo e, caso o problema persista, reinstale o DWE-IS."))              
            grass.run_command('r.colors', map = output, rules = "grey", quiet=True)	
    # Return to previous G.region configuration
    if proj_units=="meters":	   
        grass.run_command("g.region", rast = inputlulc, res= b_srx, quiet=True)  
    else:
        grass.run_command("g.region", rast = inputlulc, quiet=True)  		   	
    

		
    grass.message((" "))
    grass.message((" "))
    grass.message((" "))	
    grass.message(("Indicador de susceptibilidade à desertificação à escala Regional foi produzido com sucesso.\n"))

	
	
	

def  apply_mask(mask,lulc,vegetation):
# # # # # Apply mask over lulc and vegetation resampled maps
    tempfile="myscript.tmpQ"	
    try:
       grass.mapcalc("$tempfile= if($mask==1, $lulc,null())", tempfile=tempfile, lulc=lulc, mask=mask)         
       p=grass.run_command('g.rename', rast = (tempfile, lulc), quiet=True, overwrite=True)		 
	
       grass.mapcalc("$tempfile= if($mask==1, $veget,null())", tempfile=tempfile, veget=vegetation, mask=mask)                
       p=grass.run_command('g.rename', rast = (tempfile, vegetation), quiet=True, overwrite=True)		 	
    except:      
        return -1

    return 0

	
def eliminate_nullvalues(static_cokriging,dynamic_cokriging):
# # # # # GEOMS may generate a negative and higher than 1 values which is not wanted. Although the name of the function is wrong this is due to the fact that previous option was to eliminate these values
    tempfile="myscript.tmpG"
    tempfile2="myscript.tmpH"
    try:
       grass.mapcalc("$tempfile= if($static_cokriging<0, 0,if($static_cokriging>1,1,$static_cokriging))", static_cokriging=static_cokriging,tempfile=tempfile)         
       grass.mapcalc("$tempfile2= if($dynamic_cokriging<0, 0,if($dynamic_cokriging>1,1,$dynamic_cokriging))", dynamic_cokriging=dynamic_cokriging,tempfile2=tempfile2)         	   	
       p=grass.run_command('g.rename', rast = (tempfile, static_cokriging), quiet=True, overwrite=True)		              	
       p=grass.run_command('g.rename', rast = (tempfile2, dynamic_cokriging), quiet=True, overwrite=True)		 	
    except:      
       return -1

    return 0		


def correct_movingvariances(list_files):
    # Create temporary file
    tempQ= "myscript.tmpQ"	
	
    for x in list_files:        
        try:
           grass.mapcalc("$correct_file= ($xinput *10)/(9)", correct_file=tempQ, xinput=x)         
           p=grass.run_command('g.rename', rast = (tempQ, x), quiet=True, overwrite=True)		              
        except:
           grass.run_command("g.remove", flags = "f", quiet=True, rast=tempQ)
           return -1
    return 0		   
	
def get_projection_units():
# # # # # Function to retrieve Location's Geo Units
    proj_location = grass.read_command('g.proj', flags = 'jf').strip()	
    if "XY location (unprojected)"==proj_location:
        grass.fatal(("Este módulo necessita de ser corrido numa Location projectada (encontrada: %s). Por favor altere a Location ou Projeccão/Sistema de coordenadas geográficas.") % proj_location)
    location_param= proj_location.split(" ")
    if location_param.__contains__("+units=m")==True or location_param.__contains__("+proj=longlat")==False:           
        return "meters"
    else:
        return "other"

def check_dataset(raster_map,e_mapset):		
# # # # # Check if image exists
    check_input= grass.find_file(raster_map, element = 'cell', mapset=e_mapset)
    if check_input['fullname'] =="":           
        return -1
    return 1	

def get_params(parameter,lines,type):
# # # # # Get Climate (dynamic and static) weights+Correlation Coefficients to be used in final Desertification indicator calculation
    value1=''
    value2=''	
    string1= parameter[0]+ '='
    string2= parameter[1]+ '='
    n_chars1= len(string1)
    n_chars2= len(string2)	
    for x in lines:
       temp1= x[0:n_chars1]
       temp2= x[0:n_chars2]	   
       if temp1==string1:         #Weight/Correlation Coef 1
           value1=x[n_chars1:]  
       if temp2==string2:         #Weight/Correlation Coef 2
           value2=x[n_chars2:]  

    if value1=='' or value2=='':
        if type=='weights':		
            grass.fatal(("Pesos dos parâmetros estáticos/dinâmicos não foram encontrados no ficheiro de parameterização. Por favor verifique o ficheiro de parameterização do indicador de desertificação.") )           	   
        elif type=='correlationcoeff':
            grass.fatal(("Os parâmetros de coeficiente de correlacao nao foram encontrados no ficheiro de parameterização. Por favor verifique o ficheiro de parameterização do indicador de desertificação.") )           	   		
        else:
            grass.fatal(("Uso incorrecto do leitor do ficheiros de parameterização. Tente de novo e, caso o problema persista, reinstale o DWE-IS.") )           	   		
    return [value1,value2]
def get_values(parameter,lines):
# # # # # Retrieve values for each of Desertification parameter
   value1=''
   value2=''
   n_chars= len(parameter) +4
   string1=parameter + 'hsd='
   string2=parameter + 'lsd=' 
   for x in lines:
       temp= x[0:n_chars]
       if temp==string1:         #HSD
           value1=x[n_chars:]  
       if temp==string2:         #LSD
           value2=x[n_chars:]          
   if value1=='' or value2=='':
        grass.fatal(("parâmetro %s (para HSD e/ou LSD) não existe no ficheiro de parameterização. Por favor verifique o ficheiro de parameterização.") % parameter)           	   
   return [value1,value2]

def check_lsdhsd(inputhsd,inputlsd,parameter,domain):
# # # # # Check values of LSD and HSD
    if domain=='vegetation':
       check_value(inputhsd,parameter)
       check_value(inputlsd,parameter)
       if float(inputhsd)<=float(inputlsd):
           return 1
       else: 
           grass.fatal(("Valor inserido para %s HSB deverá ser  menor ou igual ao valor de LSD.") % parameter)           	   
    elif domain=='soil':
       check_value(inputhsd,parameter)
       check_value(inputlsd,parameter)
       if float(inputhsd)>=float(inputlsd):
           return 1
       else: 
           grass.fatal(("Valor inserido para %s HSB deverá ser  maior ou igual ao valor de LSD.") % parameter)           	   		   
    else:
       grass.fatal(("Não foi possível ao DWE-IS ler correctamente os parâmetros de desertificação. Por favor verifique estes e tente de novo."))	
	
def check_value(input, parameter):
# # # # # Check if value is a valid float
    try:
       value_check= float(input)
    except ValueError:
        grass.fatal(("Valor inserido para %s nao é válido.") % parameter)	

    if float(input)>=0 and float(input)<=1:
        return 1
    else:
        grass.fatal(("Valor inserido para %s nao é válido.") % parameter)	
	
def check_weights(input1, parameter1, input2, parameter2):
# # # # # Check inserted weights
    try:
       value_check= float(input1)
    except ValueError:
        grass.fatal(("Valor inserido para %s não é válido.") % parameter2)		
    try:
       value_check= float(input2)
    except ValueError:
        grass.fatal(("Valor inserido para %s não é válido.") % parameter2)		

    input1=float(input1)
    input2=float(input2)
    if input1>=0 and input1<=1 and input2>=0 and input2<=1:
        check_sum= input1+input2
        if check_sum>=0 and check_sum<=1:
           return 1
        else:
           grass.fatal(("Valores inseridos como pesos para os indicadores dinâmicos e/ou estáticos não são válidos."))			
    else:
        grass.fatal(("Valores inseridos como pesos para os indicadores dinâmicos e/ou estáticos não são válidos."))		

def check_correlationcoeffs(input1, parameter1, input2, parameter2):
# # # # # Check inserted correlation coeffs
    try:
       value_check= float(input1)
    except ValueError:
        grass.fatal(("Valor inserido para %s não é válido") % parameter1)
    try:
       value_check= float(input2)
    except ValueError:
        grass.fatal(("Valor inserido para %s não é válido") % parameter2)		

    input1=float(input1)
    input2=float(input2)	
    if input1>=0 and input1<=1 and input2>=0 and input2<=1:        
        return 1
    else:
        grass.fatal(("Valores inseridos como coeficientes de Correlação nao sao validos."))			

def eliminate_files(file,folder):
# # # # # Eliminate files for and or from GeoMS
    if file=='all':
       list_files= os.listdir(folder)

       for x in list_files:
           os.remove(folder + x)	   
	   
    else:
       check_file= os.path.isfile(file)    	
       if check_file==True:
           os.remove(file)	   
        
    return 0	   

def existing_validvalues(input):
    #0 =doesnot have any valid value
    #-1 =has at least a valid value
    univar_output=grass.read_command("r.univar", map=input, flags="g")
    univar_output=univar_output.split('\n')   
    nvalues= int((univar_output[0].split('='))[1])     		
    nullvalues= int((univar_output[1].split('='))[1])     	
    if nvalues==nullvalues or nvalues==0:
      return 0
    else:
      return -1	

def eliminate_rastermaps(raster_list):
# # # # # Eliminate raster maps without having to print warnings in Command output
    temp_list=['']
    for x in raster_list:
       p=grass.mlist_grouped('rast', pattern=x)	
       if len(p)>0:
            temp_list.append(x)	
    temp_list.remove('')
    nuldev = file(os.devnull, 'w+')			
    if len(temp_list)>0:
        grass.run_command("g.remove", flags = "f", quiet=True, rast=temp_list, stderr = nuldev)
    nuldev.close()
    return 0


def eliminate_rasterlists(pattern, cmapset):   
# # # # # Eliminate raster maps without having to print warnings in Command output
   p=grass.mlist_grouped ('rast', pattern=pattern)   
   check_existance= cmapset in p
   if check_existance:       
       temp_list=['']	   
       raster_list= p[cmapset]
       for x in raster_list:
           temp_list.append(x)
       temp_list.remove('')
       nuldev = file(os.devnull, 'w+')		   
       grass.run_command("g.remove", flags = "f", quiet=True, rast=temp_list, stderr = nuldev)  	       
       nuldev.close()			   
   return 0		
		
def string_check(text):
# # # # #Function to check if preffix string includes any invalid strings/characters
    if text=="0" or text==".":
       return -1
    check_charact=[]
    check_charact=check_charact+[text.find(".")]
    check_charact=check_charact+[text.find("myscript.tmp")]		
    check_charact=check_charact+[text.find("~")]	
    check_charact=check_charact+[text.find("/")]
    check_charact=check_charact+[text.find("\\")]
    check_charact=check_charact+[text.find("\"")]
    check_charact=check_charact+[text.find("\'")]
    check_charact=check_charact+[text.find(" ")]			
    check_charact=check_charact+[text.find("@")]
    check_charact=check_charact+[text.find(",")]	
    check_charact=check_charact+[text.find(";")]	
    check_charact=check_charact+[text.find(":")]	
    check_charact=check_charact+[text.find("=")]
    check_charact=check_charact+[text.find("!")]	
    check_charact=check_charact+[text.find("?")]
    check_charact=check_charact+[text.find("%")]
    check_charact=check_charact+[text.find("$")]	
    check_charact=check_charact+[text.find("#")]	
    check_charact=check_charact+[text.find(">")]			
    check_charact=check_charact+[text.find("?")]		
    check_charact=check_charact+[text.find("{")]
    check_charact=check_charact+[text.find("}")]	
    check_charact=check_charact+[text.find("[")]
    check_charact=check_charact+[text.find("]")]		
    check_charact=check_charact+[text.find("+")]
    check_charact=check_charact+[text.find("*")]				    
    check_charact=check_charact+[text.find("-")]
    check_charact=check_charact+[text.find("&")]
    check_charact=check_charact+[text.find("%")]    
    check_charact=check_charact+[text.find("subclass")]		
    check_charact=check_charact+[text.find("LULC")]			
    check_charact=check_charact+[text.find("__")]				
    check_charact=check_charact+[text.find("ndvi")]					
    check_charact=check_charact+[text.find("B.")]			
	
    if max(check_charact)!=-1:
        return -1
    else:
        return 0			
   

if __name__ == "__main__":
    options, flags = grass.parser()
    main()
